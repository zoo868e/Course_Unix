This is a large class. Unless each of you follows the below rules, the grading
work becomes so hard. So I REQUIRE you to FOLLOW THESE RULES:

1. Follow the rules on how to name files, on how to submit things, etc.
   Don't email the file to me, but submit it. But, that being said, if you are
   unable to submit it to the cyberuniversity, for some reason (such as because
   you aren't yet enrolled in the course), then email the assignment to me
   immediately. If you wait until the next day, then it will not be accepted.
   (My email is stevewhaga@yahoo.com).


2. Submit exactly one file named: "PA3.tar". This tar file will contain inside
   of it a directory named PA3, and that PA3 directory will contain the files:
   cantmove, get, drop, turn, and break. I do not care whether that directory
   also contains other files besides the five I just mentioned -- So you can
   just tar-up your PA3 directory, including all of the files I've given you,
   such as this file that you are currently reading. But I don't want your
   submission to have any problems, such as being too big. So, even though I
   do not care what other files are in the submission, none of them can be
   bigger that 50 kbytes, with the exception of the rooms.tar file.
   

3. Submit on time. Submissions made after the deadline will be ignored.
   (By the way, if you don't turn in your assignments, you will probably Fail
    The Class. That's a Fact. So start early and ask questions.)


4. Submit through the cyber university. Lecture 1 (which you can find on this
   course's cyberuniversity website page, that is: the same page you downloaded
   this programming assignment from) has a description at the end about how to
   upload the homework. These slides cannot be understood from a printout; they
   must be played to see the animation that explains the uploading process.
   If you submit a second time, it will overwrite your first submission. If you
   submit after the deadline (11:59pm), then the system will not allow you to
   submit. (At that point you should immediately email your attached homework
   to me at stevewhaga@yahoo.com)


5. Don't cheat. You may discuss the assignment with your classmates. Discussion
   can be quite helpful to your learning -- IF you ONLY talk about the concepts
   of the assignment. If, however, you discuss specific implementation details,
   then you're not helping others learn; you're just doing their work for them.

   You CANNOT share code. You CANNOT show another student ANY part of your
   answer to the assignment. You CANNOT let another student look over your
   shoulder at your code. You CANNOT describe your answer, except in a general
   way. Think of these assignments as take-home exams.

   You CAN discuss what the assignment's requirements are (eg, questions over
   the meaning of the English). You CAN give general tips on how to implement
   the assignment. If a student describes to you what isn't working in their
   solution, you CAN give suggestions on how to try to fix it -- but you CANNOT
   look at their code and debug it for them. Instead, try using a different
   example that suffers from the same problem, and help your classmate to debug
   that example.
   
   Once again: you CANNOT let a student look over your shoulder when your code
   is on the screen.

   If students are found to be sharing work, they will receive a 0 for this
   course, or worse. We always look for evidence of cheating, so don't do it.
   (In any event, even if you do not get caught, a student who copies the
   homework will not learn the material, so they will fail the exam.)

   Some students have expressed some confusion about what constitutes cheating.
   我發現有些學生對於作弊的定義很困惑。

   You really ought to know by your third year of college. But, because the
   penalties are severe, I understand why some feel cautious.
   大三了，你應該早就知道甚麼是作弊。然而，由於後果是如此的嚴重，所以我了解你
   為何會如此謹慎。 

   Actually, the homework description files contain a pretty good definition of
   cheating: copying someone else's code or letting them copy your code. 
   事實上，每一次的作業都有很詳細的說明作弊的定義：抄襲別人的程式碼或讓別人抄襲
   自己的程式碼。

   The confusion comes from times when students work together on an assignment.
   To be more clear: working together on THINKING about an assignment. (Working
   together ON the assignment would be cheating, these are not group projects.)
   會產生對作弊的困惑是因為有些學生是團體一起寫作業。好吧，我們說得更清楚一些。
   就是一起討論和寫一份作業。(一起寫作業就是作弊，作業不是以組別為單位繳交的。)

   The analogy is identical to a take-home exam. There is no such thing as a
   group exam, but there is such a thing as a study group. 
   這跟帶回家的考試不一樣，因為有以群組為單位的讀書會這種東西，但是沒有以群組為
   單位的考試這種東西。

   Study groups are good; students learn from each other and end up with a
   better grasp of the material than if they had worked alone. 
   讀書會是好的，因為學生可以彼此學習，比起自己一個人努力讀書，團體讀書更可以掌
   握教材。

   But groups working together to DO an assignment are bad, because students
   learn less than they would alone -- no learning occurs when you just copy
   the code from someone else. 
   但是團體寫作業就不好了，因為比起自己單獨做作業，團體寫作業的時候學生可以學習
   的更少--特別是"只是抄襲別人的程式"這根本就沒有任何的學習。 

   So: If you do not actually look at someone else's code or actually give your
   code to someone else (electronically, physically, OR verbally), then you are
   not cheating. 
   所以，以下是我的答案：如果你沒有看別人的程式碼或把你的程式碼給別人看，那你就
   沒有作弊。(傳檔案，手抄，口頭轉達)

   Of course, the line blurs a little bit: "What if my friend asked me why his
   "ln" command didn't work, and I told him he needed a -s flag? Then, later,
   when he puts this command into his program, did I cheat?" Answer: No. 
   當然，這界線有點模糊：如果我朋友問我說為何指令ln不能用？然後我告訴他說：你需
   要加上-s。然後，他就把這個答案放進去他的程式裡面，那我算作弊嗎？答案是：不算

   That type of collaboration falls into the category of studying together, not
   team-programming. 
   這類型的合作屬於一起學習，而非團體寫程式。 

   The outcome of such collaboration is increased learning, not decreased
   learning.
   這種方式的合作會增加學生了解內容的機會，不會減少學生去認識課程內容。 

   But it becomes a different thing when your friend says: "I don't understand
   how to do line 26 in HW2". 
   但這種情況就另當別論了，當你的朋友說：我不知作業2的第26行怎麼寫耶。

   And then you answer: "Oh, use this: ..." and you show or describe the whole
   thing or give him your wildcard pattern. That is a big piece of code. 
   然後你回答：喔...就是用這個阿...。然後你就把整個答案都給他看。<--這可是一大
   塊程式碼耶！ 

   That's called doing his assignment for him. Another name for it is cheating.
   It's not fair to the other students who try to work on their own. 
   這種情形就叫做"幫別人寫作業"。另外一種說法就是"作弊"。這對於那些努力試著自己
   寫作業的學生來說這是不公平的。 

   Note that this rule is not limited to literally showing the code, because it
   is also cheating to DESCRIBE the code so clearly that you might as well have
   shown it.

   If you have further questions, you may ask me.


6. Test your answer before submitting. You must match the output described
   below, or else you will get 0. Of course you must also test other inputs
   to get a good score. It has come to my attention that a quarter of the class
   opted for a 0 on the first programming assignment. Please do better in the
   future. You really do need to pass the minimum test in order to get a grade.

   The walkthroughPA2.txt file contains a discussion of the commands used in
   testInput.sh, as well as hints on how to simplify their implementation to
   get an output that matches the expectedOutput.txt file.

   Hopefully, running checkYourOutput.sh will behave as follows:
       % checkYourOutput.sh
       Be patient. This might take up to 2 minutes to run...
       Finished Running. Now checking for differences to the expected output:
       You passed the basic test.
       %

   If you don't get this output, you will get 0%. Therefore, if you are not
   getting the right output, you might need to simplify some of your commands.
   See the PA2shortAssignment.txt file for hints on this.
    
   If you do get the above output, then you will get a score of at least 50%,
   unless you didn't follow basic directions, such as by using commands that
   were not introduced in the first five lectures.

   But a special case is if it lists the right things in a different order. In
   this case, there is no point deduction. Consult the gradingPolicy.txt file
   from Prgramming Assignment #2 for a discussion of this issue.

7. Run the checkYourOutput.sh file correctly. There is an extra step to the
   testing process, as compared to the previous homework. This is because the
   Gamma Computing Center's door requires a combination to be entered. If we
   were playing the game, we would type it in. But we are instead running a
   test script, and so we have to use redirection to get that combination from
   a file. Here is how it is done:
      % head -4 ./testInput.sh
      sed 's,cantmove w,& < ~/PA3/comb.txt,' <~/PA3/PA3.sh >~/PA3/PA3.temp.sh
      chmod u+x ~/PA3/PA3.temp.sh
      source ~/PA3/PA3.temp.sh
      rm -f ~/PA3/PA3.temp.sh
      %
   See here that I have create a temporary version the PA3.sh file. In order to
   create this temporary file, I've used the sed command (which you don't know
   and which you cannot use in the assignment). We will learn sed in our next
   lecture. In this case, the sed command is just inserting a "<~/PA3.comb.txt"
   after "cantmove w". In other words, if you execute "cantmove w", then the
   keyboard input will be taken from "comb.txt". And what is "comb.txt"? Well:
      % head -7 ./testInput.sh
      sed 's,cantmove w,& < ~/PA3/comb.txt,' <~/PA3/PA3.sh >~/PA3/PA3.temp.sh
      cp ~/PA3/comb.wrong ~/PA3/comb.txt
      echo ">get lamp";get lamp
      echo ">e";e
      %
   So the "comb.txt" file is just a copy of "comb.wrong". Once the "comb.txt"
   file is created, the gemae then starts to be run, like it was run back in
   programming assignment #2. But what is "comb.wrong"? It is one of two files
   that you will need to create in the PA3 directory, as shown here:
      % cd ~/PA3
      % ls comb.?????
      comb.right  comb.wrong
      %
   Note: I did not say that I gave you these files. I said that you must make
   them yourself. And what are you meant to put in them? Simply a combination.
   Consider the file for the wrong combination:
      % cat comb.wrong
      123
      %
   Yes that is the wrong combination. But what is the right one?:
      % cat comb.right | tr 0-9 \?
      ???
      %
   As you can see, I'm not giving you the right combination. You have to find
   it yourself, by following the instructions given in the README file.

   OK. So now we are able to run the test input. When we try going west, we
   might run "cantmove w < ~/PA3/comb.txt". If we do so, then keyboard input is
   redirected from "comb.txt", which currently contains "123". This redirection
   can have two outcomes. The most common situation is that you are not outside
   the gamma computing center; in this case, the redirection does not matter,
   because th cantmove script will not check for keyboard input. The second
   situation is that you are outside of the computing center; in this case you
   will be told that your combinated was wrong.

   But there is another step. What about entering the right combination, (ie,
   the number stored in "comb.right")? Well that case is handled near the end
   of the test input:
      % tail -7 ./testInput.sh
      echo ">drop lamp";drop lamp
      echo ">w";w
      cp ~/PA3/comb.right ~/PA3/comb.txt
      echo ">w";w
      echo ">i";i
      echo ">break lamp";break lamp
      echo ">break cable";break cable
      %
   See in the above that we first try going in with the wrong combination. Then
   we copy over the right combination and try again.
   Another thing to see above is that we drop the lamp before entering the
   computing center. ("But teacher, you said the basic test wouldn't kill me."
   Well, being in a dark room will only kill you if you try to move. We won't
   move, because we will break the cable instead -- thus ending the game.)
