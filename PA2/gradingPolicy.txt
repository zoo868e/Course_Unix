This is a large class. Unless each of you follows the below rules, the grading
work becomes so hard. So I REQUIRE you to FOLLOW THESE RULES:

1. Follow the rules on how to name files, on how to submit things, etc.
   Don't email the file to me, but submit it. But, that being said, if you are
   unable to submit it to the cyberuniversity, for some reason (such as because
   you aren't yet enrolled in the course), then email the assignment to me
   immediately. If you wait until the next day, then it will not be accepted.
   (My email is stevewhaga@yahoo.com).


2. Submit exactly one file named: "PA2.sh". (In the first homework, I had you
   add your student ID to the file name. But, I now have learned, the cyber
   university already does that anyway. So just submit "PA2.sh").


3. Submit on time. Submissions made after the deadline will be ignored.
   (By the way, if you don't turn in your assignments, you will probably Fail
    The Class. That's a Fact. So start early and ask questions.)


4. Submit through the cyber university. Lecture 1 (which you can find on this
   course's cyberuniversity website page, that is: the same page you downloaded
   this programming assignment from) has a description at the end about how to
   upload the homework. These slides cannot be understood from a printout; they
   must be played to see the animation that explains the uploading process.
   If you submit a second time, it will overwrite your first submission. If you
   submit after the deadline (11:59pm), then the system will not allow you to
   submit. (At that point you should immediately email your attached homework
   to me at stevewhaga@yahoo.com)


5. Don't cheat. You may discuss the assignment with your classmates. Discussion
   can be quite helpful to your learning -- IF you ONLY talk about the concepts
   of the assignment. If, however, you discuss specific implementation details,
   then you're not helping others learn; you're just doing their work for them.

   You CANNOT share code. You CANNOT show another student ANY part of your
   answer to the assignment. You CANNOT let another student look over your
   shoulder at your code. You CANNOT describe your answer, except in a general
   way. Think of these assignments as take-home exams.

   You CAN discuss what the assignment's requirements are (eg, questions over
   the meaning of the English). You CAN give general tips on how to implement
   the assignment. If a student describes to you what isn't working in their
   solution, you CAN give suggestions on how to try to fix it -- but you CANNOT
   look at their code and debug it for them. Instead, try using a different
   example that suffers from the same problem, and help your classmate to debug
   that example.
   
   Once again: you CANNOT let a student look over your shoulder when your code
   is on the screen.

   If students are found to be sharing work, they will receive a 0 for this
   course, or worse. We always look for evidence of cheating, so don't do it.
   (In any event, even if you do not get caught, a student who copies the
   homework will not learn the material, so they will fail the exam.)

   If you have questions about these rules, you may email me.


6. Test your answer before submitting. You must match the output described
   below, or else you will get 0. Of course you must also test other inputs
   to get a good score.

   The walkthroughPA2.txt file contains a discussion of the commands used in
   testInput.sh, as well as hints on how to simplify their implementation to
   get an output that matches the expectedOutput.txt file.

   Hopefully, running checkYourOutput.sh will behave as follows:
       % checkYourOutput.sh
       Be patient. This might take up to 2 minutes to run...
       Finished Running. Now checking for differences to the expected output:
       You passed the basic test.
       %

    If you don't get this output, you will get 0%. Therefore, if you are not
    getting the right output, you might need to simplify some of your commands.
    See the walkthroughPA2.txt file for hints on this.
    
    If you do get the above output, then you will get a score of at least 50%,
    unless you didn't follow basic directions, such as by using commands that
    were not introduced in the first two lectures.

    But there is a special case: if it lists the right things in a different
    order. For example, in the weight room there is both a life preserver and
    a weight. When the room displays, my implementation says:
    % head -28 expectedOutput.txt | tail -7
    >e
    Weight room
    You are in an old weight room.  All of the equipment is either destroyed or
    completely broken.  There is a door out to the west, and there is a ladder
    leading down a hole in the floor.
    There is a 10 pound weight here.
    There is a life preserver here.
    %
    The point of the above is: the weight listed before the life preserver.

    But when I use getall, and then when I look in my inventory, the order is
    reversed:
    % head -37 expectedOutput.txt | tail -7
    >getall
    Taken: a preserver
    Taken: a weight
    >i
    You currently have:
    A preserver
    A weight
    %

    The point is: if any of the above lists are in a different order on your
    computer, that is not an error, because the order does not matter. So, in
    that case, you would have to ignore that part of the output from diff, in
    judging whether you can get a grade. It may also be possible to change the
    language settings to get it to print the same, if you have this problem.
